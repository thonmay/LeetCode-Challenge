//876. Middle of the Linked List


int length(ListNode* &head)
{
    if(head == nullptr)
        return 0;
    else
    {
        int cnt = 0;
        ListNode* temp = head;
        while(temp != nullptr)
        {
            cnt++;
            temp = temp->next;
        }
        return cnt;
    }
        
}

class Solution {
public:
    ListNode* middleNode(ListNode* head) {
        vector<int> v{};
        
        int len = length(head);

        if (len%2 == 0){
            len = len/2 ;
            for(int i=1 ; i<=len; i++)
                head = head->next ;
        }
        else{
            len;
            len = len/2 ;
            for(int i=1 ; i<=len ;i++)
                head = head->next ;
        }
        return head ;
        
        
    }
};

//Solution 2: Concise approach
class Solution {
public:
    ListNode* middleNode(ListNode* head) {
        
        int len = length(head);

        for (int i = 1; i <= len / 2; i++)
            head = head->next;

        return head;
        
        
    }
};
