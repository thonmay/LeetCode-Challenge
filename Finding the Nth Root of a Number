
//Optimal Solution
#include<bits/stdc++.h>
using namespace std;

double eps = 1e-6;            //here, 6 means we want 5 decimal points
double multiplyNtimes(double mid, int n){
    double ans = 1;
    for(int i =0; i <n; ++i)
        ans *= mid;
    return ans;
}
int main(){
    double num; cin>>num;
    int times; cin>>times;
    double low =1, high= num, mid;
    
    while(high-low > eps){        //until high-low is greater than eps, it won't terminate
        mid = low+(high-low)/2;

        if(multiplyNtimes(mid, times) > num)
            high = mid;         //not 'mid+1' for precision
        else
            low = mid;
    }
    cout<<fixed<<setprecision(5)<<high;         //up to how many decimal points? 
}

//MY FIRST TRY

#include<bits/stdc++.h>
using namespace std;

int sqrtOfNum(vector<int>& v, int num){
    int low = 0, high = v.size()-1, mid;

    while(low <= high){
        mid = low+(high-low)/2;
        if(v[mid] * v[mid] == num)    
            return mid;
        if(v[mid] * v[mid] > num)
            high = mid -1;
        else
            low = mid+1;  
    }
    return -1;

}

int main(){
    int sqrtNum; 
    cin>>sqrtNum;             //let's say 9
    vector<int> v {};         //monotonic vec
    for(int i = 1; i <= sqrtNum;++i){
        v.push_back(i);
    }
                        
    int in = sqrtOfNum(v, sqrtNum);
    if(in!=-1)
        cout<<"value: "<<v[in];
    else 
        cout<<"NOT FOUND!";
}
