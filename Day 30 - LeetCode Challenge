//234. Palindrome Linked List
//                                      Space Complexity O(1) & Time Complexity O(n)
class Solution {
private:
    ListNode* getMid(ListNode* head)
    {
        ListNode* slow = head;
        ListNode* fast = head->next;
        while(fast && fast->next)
        {
            fast = fast->next->next;
            slow = slow->next;
        }
        return slow;
    }
    ListNode* getReverse(ListNode* head)
    {
        ListNode* prev = nullptr;
        ListNode* curr = head;
        while(curr)
        {
            ListNode* forward = curr->next;
            curr->next = prev;
            prev = curr;
            curr = forward;
        }
        return prev;
    }
public:
    bool isPalindrome(ListNode* head) {
        
        if(!head->next) return true;
        //Step 1: Get the mid of LL
        ListNode* mid = getMid(head); 
        
        //Step 2: Reverse it
        ListNode* temp = mid->next;
        mid->next = getReverse(temp);

        //Step 3: Compare both Halves
        ListNode* head1 = head;
        ListNode* head2 = mid->next;
        while(head2)
        {
            if(head1->val != head2->val) return false;
            head1 = head1->next;
            head2 = head2->next;
        }
        return true;

    }
};


//Using Vector       -- Space Complexity O(n) & Time Complexity O(n)
class Solution {
public:
    bool isPalindrome(ListNode* head) {
       vector<int> v{};
       vector<int> reV{};

       ListNode* temp = head;
       while(temp)
       {
           v.push_back(temp->val);
           temp = temp->next;
       }
       int size = v.size();
       
       for(int i = 0; i < size/2; ++i)
       {
           if(v[i] != v[size - 1 - i])
           {
               return false;
           }
       }
       return true;
    }
};
