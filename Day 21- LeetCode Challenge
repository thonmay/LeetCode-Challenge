//215. Kth Largest Element in an Array

C++
class Solution {
public:
    int findKthLargest(vector<int>& nums, int k) {
        //1. Naive approach
        sort(nums.begin(), nums.end(), greater<int>());
        return nums[k-1];
        
        //2. Using Priority Queue
            //Min Heap
        priority_queue<int, vector<int>, greater<int> > pq{}; 
        for(int i = 0; i < k; ++i)
        {
            pq.push(nums[i]);
        }
        for(int i = k; i < nums.size(); ++i)
        {
            if(nums[i] > pq.top())
            {
                pq.pop();
                pq.push(nums[i]);
            }
        }
        int ans = pq.top();
        return ans;
    }
}


//Java
class Solution {
    public int findKthLargest(int[] nums, int k) {
       //Naive approach
       PriorityQueue<Integer> minHeap = new PriorityQueue<>();

        // Add the first k elements to the min heap
        for (int i = 0; i < k; ++i) {
            minHeap.offer(nums[i]);
        }

        // Iterate through the remaining elements
        for (int i = k; i < nums.length; ++i) {
            if (nums[i] > minHeap.peek()) {
                minHeap.poll();
                minHeap.offer(nums[i]);
            }
        }

        return minHeap.peek(); 
    }
}
