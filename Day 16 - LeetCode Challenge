//104. Maximum Depth of Binary Tree     
//Time complexity --> O(n)
class Solution {
public:
    int maxDepth(TreeNode* root) {
        if(root == nullptr) return 0;       //if root is nullptr, return 0

        int left = maxDepth(root->left);    //calling for the left subtree
        int right = maxDepth(root-> right); //calling for the right subtree

        //comparing which subtree is longer
        if(left > right)
            return left+1; //returning the longest one with adding 1(for root node)
        else
            return right+1;
    //return max(left, right)+1;
    }

//Java Solution 
class Solution {
    public int maxDepth(TreeNode root) {
        if(root == null) return 0;

        else
            return 1+Math.max(maxDepth(root.left), maxDepth(root.right));
    }
}
