#include <bits/stdc++.h>
using namespace std;

string isBalanced(string s) {
    stack<char> st;
    for(int i =0; i < s.length(); ++i){
        if(s[i] == '(' || s[i] == '{' || s[i] == '['){
            st.push(s[i]);
        }
        else{
            if(st.empty()){
                return "NO";
            }
            else if(s[i] == ')' && st.top()=='(' || s[i]=='}' && st.top()=='{' || s[i] == ']' && st.top()=='[' ){
                st.pop();
            }
            else{
                return "NO";
            }
        }
    }
    if(st.empty()){
        return "YES";   
    }
    else{
        return "NO";
    }
}

// better way using MAP
unordered_map<char, int> val {{'(', 1}, {'{', 2}, {'[', 3}, {')', -1}, {'}', -2}, {']',-3}};
    stack<char> st {};
    string chars = "({{[]}]})";
    
    for(auto ch : chars ){
        if(val[ch] > 0){
            st.push(ch);
        }
        else{
            if(st.empty()){
                cout<<"Not valid"<<endl; 
                return 0;
            }
            char topEl = st.top();
            if(val[ch] + val[topEl] == 0){
                st.pop();
            }
            else{
                cout<<"Not valid either:)";
                return 0;
            }
        }
    }
    if(st.empty())
        cout<<"Valid parenthesis"<<endl;
    else
        cout<<"It's not valid:)";
