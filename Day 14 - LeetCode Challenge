//BINARY TREE 1st problem

//TIME COMPLEXITY -- O(N)
class Solution {
public:
    int count = 0;   //***
    int rangeSumBST(TreeNode* root, int low, int high) {
        if(root != nullptr){
            if(root->val <= high && root->val >= low){
                count += root->val;
            }
            rangeSumBST(root->left, low, high);
            rangeSumBST(root -> right, low, high);
        }
        return count;
        
    }
};

//94. Binary Tree Inorder Traversal                 Time Complexity -- O(N)
class Solution {
public:
    vector<int> v {};
    vector<int> inorderTraversal(TreeNode* root) {
        if(root != nullptr){
            inorderTraversal(root->left);
            v.push_back(root->val);
            inorderTraversal(root->right);
        }
        return v; 
    }
    

}
