//876. Middle of the Linked List (Using Fast & Slow pointers)          -- Time Complexity --> O(N)

class Solution {
public:
    ListNode* middleNode(ListNode* head) {
        //empty OR 1 node
        if(head == nullptr || head->next == nullptr)
            return head;
        //2 nodes
        if(head->next->next == nullptr)
            return head->next;

        //Fast & Slow 
        ListNode* slow = head;
        ListNode* fast = head->next;
        while(fast != nullptr)
        {
            if(fast->next == nullptr)
            {
                fast = fast->next;
                slow = slow->next;
            }
            else
            {
                fast = fast->next->next;
                slow = slow->next;
            }
            
        }
        return slow;
    }
};


//876. Middle of the Linked List (Using Length of the Linked List)          -- Time Complexity --> O(N)

int getLen(ListNode* &head){
    if(head == nullptr)
        return 0;
    int cnt = 0;
    ListNode* temp = head;
    while(temp != nullptr)
    {
        cnt++;
        temp = temp->next;
    }
    return cnt;
}

class Solution {
public:
    ListNode* middleNode(ListNode* head) {
        if(head == nullptr || head->next == nullptr)
            return head;
        
        int len = getLen(head);
        int ans = (len/2) ;

        ListNode* temp = head;
        int cnt = 0;
        while(cnt < ans)
        {
            temp = temp->next;
            cnt++;
        }
        return temp;

    }
};



